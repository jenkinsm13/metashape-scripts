import os
import Metashape
import time

# Prompt the user to select a Watch Folder
watch_folder = Metashape.app.getExistingDirectory("Select Watch Folder")
processed_photos = set()

# Set the batch size - smaller for tethered shooting
batch_size = 10  # Reduced to process smaller batches more frequently

# Create a new chunk
doc = Metashape.app.document
chunk = doc.addChunk()

def process_batch(chunk, batch):
    """Process a single batch of photos with GUI updates"""
    try:
        chunk.addPhotos(batch)
    except OSError:
        for image_path in batch:
            try:
                chunk.addPhotos([image_path])
            except OSError:
                print(f"Could not add photo: {image_path}")
                continue

    # Match photos
    task = Metashape.Tasks.MatchPhotos()
    task.downscale = 1
    task.keypoint_limit = 40000
    task.tiepoint_limit = 4000
    task.generic_preselection = True
    task.reference_preselection = True
    task.keep_keypoints = True
    
    print("Matching photos...")
    task.apply(chunk)
    
    # Update GUI to show matching results
    Metashape.app.update()
    
    # Align cameras immediately after matching
    task = Metashape.Tasks.AlignCameras()
    task.adaptive_fitting = True
    
    print("Aligning cameras...")
    task.apply(chunk)
    
    # Update GUI to show alignment results
    Metashape.app.update()
    
    # Save project after each batch
    doc.save()

def main():
    while True:
        # Check the watch folder for JPEG images
        new_images = []
        for root, dirs, files in os.walk(watch_folder):
            for filename in files:
                if filename.lower().endswith(('.jpg', '.jpeg')):
                    image_path = os.path.join(root, filename)
                    if os.path.getsize(image_path) > 1000 and image_path not in processed_photos:
                        new_images.append(image_path)

        if new_images:
            # Divide new_images into batches
            batches = [new_images[i:i + batch_size] for i in range(0, len(new_images), batch_size)]

            for batch in batches:
                process_batch(chunk, batch)
                processed_photos.update(batch)
                
                # Pause briefly to allow GUI interaction
                print(f"Processed batch of {len(batch)} photos. Pausing for GUI interaction...")
                time.sleep(2)  # Adjust this delay as needed
                
                # Force GUI update
                Metashape.app.update()
            
            continue

        # If no new images were found, wait before checking again
        print("Waiting for new photos...")
        time.sleep(5)  # Adjust this delay based on your needs
        
if __name__ == '__main__':
    main()
